
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# camera.py - Alpaca API responders for Camera
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                StateValue, get_request_field, to_bool
from exceptions import *        # Nothing but exception classes



logger = None           


# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class CameraMetadata:
    """ Metadata describing the Camera Device. Edit for your device"""
    Name = 'SVS540MU3'
    Version = '0.1'
    Description = 'My ASCOM Camera driver for SVS 540MU3'
    DeviceType = 'Camera'
    DeviceID = '114d7c29-19dd-4050-adcd-e21b0e7cf3cc' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements ICamera\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 1       # ICameraVxxx

# --------------------
# SIMULATED CAMERA ()
# --------------------
class CameraDevice:
    def __init__(self):
        #self.logger = logger
        self._connected = False
        self._camera_state = CameraStates.cameraIdle
        self._sensor_type = SensorType.Monochrome
        self._camera_xsize = 12
        self._camera_ysize = 16
        self._binx = 1
        self._biny = 1
        self._bayeroffsetx = 0
        self._bayeroffsety = 0
        self._can_abort_exposure = False
        self._can_asymmetric_bin = False
        self._can_fast_readout = False
        self._can_get_cooler_power = False
        self._can_pulse_guide = False
        self._can_set_ccd_temperature = False
        self._can_stop_exposure = False
        self._ccd_temperature = 20
        self._cooler_on = False
        self._cooler_power = 0
        self._electrons_per_adu = 0
        self._exposure_max = 10.0
        self._exposure_min = 0.00001
        self._exposure_resolution = 1e-6
        self._fast_readout = 1.0
        self._full_well_capacity = 0
        self._gain = 1.0
        self._gain_max = 30.
        self._gain_min = 0.0
        self._gains = 1.0
        self._has_shutter = True
        self._heatsink_temperature = 0
        self._image_array = None
        self._image_array_variant = None
        self._imageready = False
        self._last_exposure_duration = 0
        self._last_exposure_start = 0
        self._max_adu = 65535
        self._num_pixels = 192
        self._percent_completed = 0
        self._readout_mode = 0
        self._readout_modes = 0
        self._sensor_name = 'SVS'
        self._sensor_type = SensorType.Monochrome
        self._set_ccd_temperature = 20
        self._start_x = 0
        self._start_y = 0
        self._x_pixel_size = 5.94
        self._y_pixel_size = 5.94

    def __str__(self):
        return f'CameraDevice: {CameraMetadata.Name}'
    
    def is_connected(self):
        return self._connected
    
    def connect(self):
        self._connected = True
        print('[connected]')

    def disconnect(self):
        self._connected = False
        print('[disconnected]')

       

cam_dev = None

def start_cam_device(logger: logger):
    logger = logger
    global cam_dev
    cam_dev = CameraDevice()
    cam_dev.logger = logger
# --------------
# SYMBOLIC ENUMS
# --------------
#
from enum import IntEnum

class CameraStates(IntEnum):
    cameraIdle      = 0,
    cameraWaiting   = 1,
    cameraExposing  = 2,
    cameraReading   = 3,
    cameraDownload  = 4,
    cameraError     = 5

class SensorType(IntEnum):
    Monochrome      = 0,
    Color           = 1,
    RGGB            = 2,
    CMYG            = 3,
    CMYG2           = 4,
    LRGB            = 5

class ImageArrayElementTypes(IntEnum):
    Unknown         = 0
    Int16           = 1
    Int32           = 2
    Double          = 3
    Single          = 4,
    UInt64          = 5,
    Byte            = 6,
    Int64           = 7,
    UInt16          = 8

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class connect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------
            cam_dev.connect()  # CONNECT DEVICE
            # ------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Connect failed', ex)).json

@before(PreProcessRequest(maxdev))
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # -------------------------------------
            is_conn = cam_dev.is_connected()  # IS DEVICE CONNECTED
            # -------------------------------------
            resp.text = PropertyResponse(is_conn, req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Camera.Connected failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # --------------------------------------
            cam_dev._connected = conn  # SET CONNECTED
            # --------------------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, 'Camera.Connected failed', ex)).json

@before(PreProcessRequest(maxdev))
class connecting:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------------
            val = True
            # ------------------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Connecting failed', ex)).json

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CameraMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class devicestate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = []
            # val.append(StateValue('## NAME ##', ## GET VAL ##))
            # Repeat for each of the operational states per the device spec
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'camera.Devicestate failed', ex)).json


class disconnect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ---------------------------
            cam_dev.disconnect()  # DISCONNECT DEVICE
            # ---------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Disconnect failed', ex)).json

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CameraMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CameraMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CameraMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(CameraMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class bayeroffsetx:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Bayeroffsetx failed', ex)).json

@before(PreProcessRequest(maxdev))
class bayeroffsety:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Bayeroffsety failed', ex)).json

@before(PreProcessRequest(maxdev))
class binx:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._binx
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Binx failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        binxstr = get_request_field('BinX', req)      # Raises 400 bad request if missing
        try:
            binx = int(binxstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'BinX {binxstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            cam_dev._binx = binx ## SET PROPERTY ##
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Binx failed', ex)).json

@before(PreProcessRequest(maxdev))
class biny:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._biny
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Biny failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        binystr = get_request_field('BinY', req)      # Raises 400 bad request if missing
        try:
            biny = int(binystr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'BinY {binystr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            cam_dev._biny = biny ## SET PROPERTY ##
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Biny failed', ex)).json

@before(PreProcessRequest(maxdev))
class camerastate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = int(CameraStates.cameraIdle) ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Camerastate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cameraxsize:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._camera_xsize
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Cameraxsize failed', ex)).json

@before(PreProcessRequest(maxdev))
class cameraysize:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._camera_ysize
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Cameraysize failed', ex)).json

@before(PreProcessRequest(maxdev))
class canabortexposure:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Canabortexposure failed', ex)).json

@before(PreProcessRequest(maxdev))
class canasymmetricbin:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Canasymmetricbin failed', ex)).json

@before(PreProcessRequest(maxdev))
class canfastreadout:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Canfastreadout failed', ex)).json

@before(PreProcessRequest(maxdev))
class cangetcoolerpower:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Cangetcoolerpower failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpulseguide:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Canpulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetccdtemperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Cansetccdtemperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class canstopexposure:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Canstopexposure failed', ex)).json

@before(PreProcessRequest(maxdev))
class ccdtemperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 20 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Ccdtemperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class cooleron:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Cooleron failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        cooleronstr = get_request_field('CoolerOn', req)      # Raises 400 bad request if missing
        try:
            cooleron = to_bool(cooleronstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'CoolerOn {cooleronstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Cooleron failed', ex)).json

@before(PreProcessRequest(maxdev))
class coolerpower:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Coolerpower failed', ex)).json

@before(PreProcessRequest(maxdev))
class electronsperadu:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Electronsperadu failed', ex)).json

@before(PreProcessRequest(maxdev))
class exposuremax:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 10.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Exposuremax failed', ex)).json

@before(PreProcessRequest(maxdev))
class exposuremin:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0.00001
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Exposuremin failed', ex)).json

@before(PreProcessRequest(maxdev))
class exposureresolution:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1e-6 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Exposureresolution failed', ex)).json

@before(PreProcessRequest(maxdev))
class fastreadout:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Fastreadout failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        fastreadoutstr = get_request_field('FastReadout', req)      # Raises 400 bad request if missing
        try:
            fastreadout = to_bool(fastreadoutstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'FastReadout {fastreadoutstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Fastreadout failed', ex)).json

@before(PreProcessRequest(maxdev))
class fullwellcapacity:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Fullwellcapacity failed', ex)).json

@before(PreProcessRequest(maxdev))
class gain:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._gain ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Gain failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        gainstr = get_request_field('Gain', req)      # Raises 400 bad request if missing
        try:
            gain = int(gainstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Gain {gainstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            cam_dev._gain = gain ## SET PROPERTY ##
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Gain failed', ex)).json

@before(PreProcessRequest(maxdev))
class gainmax:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 30. ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Gainmax failed', ex)).json

@before(PreProcessRequest(maxdev))
class gainmin:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Gainmin failed', ex)).json

@before(PreProcessRequest(maxdev))
class gains:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Gains failed', ex)).json

@before(PreProcessRequest(maxdev))
class hasshutter:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = True ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Hasshutter failed', ex)).json


@before(PreProcessRequest(maxdev))
class heatsinktemperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Heatsinktemperature failed', ex)).json

import numpy as np
@before(PreProcessRequest(maxdev))
class imagearray:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            # Génération d'une image aléatoire (mono 16 bits)
            image = np.random.randint(0, 255, (12, 16), dtype=np.int32)
            # convert image into a list of list, each list is a row
            val = image.tolist()

            # ----------------------
            msg = PropertyResponse(val, req)
            msg.Rank = 2
            msg.Type = 2
            resp.text = msg.json
            # resp.text = PropertyResponse(val, req).json

        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Imagearray failed', ex)).json

@before(PreProcessRequest(maxdev))
class imagearrayvariant:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            image = np.random.randint(0, 255, (12, 16), dtype=np.int32)

            # Conversion en liste JSON compatible
            # val = {
            #     "Type": ImageArrayElementTypes.UInt16,  # ASCOM expects this field
            #     "Rank": 2,        # ASCOM expects this field
            #     "Value": image.tolist()
            # }

            val = []
            # ----------------------
            msg = PropertyResponse(val, req)
            msg.Rank = 2
            msg.Type = ImageArrayElementTypes.Int32
            resp.text = msg.json
            # resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Imagearrayvariant failed', ex)).json

@before(PreProcessRequest(maxdev))
class imageready:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._imageready ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Imageready failed', ex)).json

@before(PreProcessRequest(maxdev))
class ispulseguiding:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Ispulseguiding failed', ex)).json

@before(PreProcessRequest(maxdev))
class lastexposureduration:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Lastexposureduration failed', ex)).json

@before(PreProcessRequest(maxdev))
class lastexposurestarttime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Lastexposurestarttime failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxadu:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Maxadu failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxbinx:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Maxbinx failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxbiny:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Maxbiny failed', ex)).json

@before(PreProcessRequest(maxdev))
class numx:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 12 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Numx failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        numxstr = get_request_field('NumX', req)      # Raises 400 bad request if missing
        try:
            numx = int(numxstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'NumX {numxstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Numx failed', ex)).json

@before(PreProcessRequest(maxdev))
class numy:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 16 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Numy failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        numystr = get_request_field('NumY', req)      # Raises 400 bad request if missing
        try:
            numy = int(numystr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'NumY {numystr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Numy failed', ex)).json

@before(PreProcessRequest(maxdev))
class offset:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Offset failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        offsetstr = get_request_field('Offset', req)      # Raises 400 bad request if missing
        try:
            offset = int(offsetstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Offset {offsetstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Offset failed', ex)).json

@before(PreProcessRequest(maxdev))
class offsetmax:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 10 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Offsetmax failed', ex)).json

@before(PreProcessRequest(maxdev))
class offsetmin:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = -10 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Offsetmin failed', ex)).json

@before(PreProcessRequest(maxdev))
class offsets:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Offsets failed', ex)).json

@before(PreProcessRequest(maxdev))
class percentcompleted:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Percentcompleted failed', ex)).json

@before(PreProcessRequest(maxdev))
class pixelsizex:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 2.7 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Pixelsizex failed', ex)).json

@before(PreProcessRequest(maxdev))
class pixelsizey:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 2.7 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Pixelsizey failed', ex)).json

@before(PreProcessRequest(maxdev))
class readoutmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Readoutmode failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        readoutmodestr = get_request_field('ReadoutMode', req)      # Raises 400 bad request if missing
        try:
            readoutmode = int(readoutmodestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'ReadoutMode {readoutmodestr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Readoutmode failed', ex)).json

@before(PreProcessRequest(maxdev))
class readoutmodes:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Readoutmodes failed', ex)).json

@before(PreProcessRequest(maxdev))
class sensorname:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 'CMOS Sensor' ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Sensorname failed', ex)).json

@before(PreProcessRequest(maxdev))
class sensortype:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Sensortype failed', ex)).json

@before(PreProcessRequest(maxdev))
class setccdtemperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = cam_dev._ccd_temperature ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Setccdtemperature failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        setccdtemperaturestr = get_request_field('SetCCDTemperature', req)      # Raises 400 bad request if missing
        try:
            setccdtemperature = float(setccdtemperaturestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SetCCDTemperature {setccdtemperaturestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            cam_dev._ccd_temperature = setccdtemperature
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Setccdtemperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class startx:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Startx failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        startxstr = get_request_field('StartX', req)      # Raises 400 bad request if missing
        try:
            startx = int(startxstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'StartX {startxstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Startx failed', ex)).json

@before(PreProcessRequest(maxdev))
class starty:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Starty failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        startystr = get_request_field('StartY', req)      # Raises 400 bad request if missing
        try:
            starty = int(startystr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'StartY {startystr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Starty failed', ex)).json

@before(PreProcessRequest(maxdev))
class subexposureduration:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = 1.0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Camera.Subexposureduration failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        subexposuredurationstr = get_request_field('SubExposureDuration', req)      # Raises 400 bad request if missing
        try:
            subexposureduration = float(subexposuredurationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SubExposureDuration {subexposuredurationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Subexposureduration failed', ex)).json

@before(PreProcessRequest(maxdev))
class abortexposure:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Abortexposure failed', ex)).json

@before(PreProcessRequest(maxdev))
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction {directionstr} not a valid integer.')).json
            return
        if not direction in [0, 1, 2, 3]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction {direction} not a valid enum value.')).json
            return

        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = int(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration {durationstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Pulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class startexposure:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = float(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration {durationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        lightstr = get_request_field('Light', req)      # Raises 400 bad request if missing
        try:
            light = to_bool(lightstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Light {lightstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            cam_dev._imageready = False
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Startexposure failed', ex)).json

@before(PreProcessRequest(maxdev))
class stopexposure:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if  not cam_dev._connected : ##IS DEV CONNECTED##
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            cam_dev._imageready = True
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Camera.Stopexposure failed', ex)).json

